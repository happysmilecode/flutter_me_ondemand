import 'dart:async';
import 'dart:math';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:socialv/zego_live/zego_sdk_key_center.dart';
import 'package:socialv/zego_live/zego_sdk_manager.dart';

import '../internal/zego_service_define.dart';
import '../utils/permission.dart';
import '../utils/zegocloud_token.dart';
import 'home_page.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key, required this.title, required this.userID, required this.userName});

  final String title;
  final String userID;
  final String userName;

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final userIDController = TextEditingController();//text: Random().nextInt(100000).toString()
  final userNameController = TextEditingController();

  List<StreamSubscription> subscriptions = [];

  @override
  void initState() {
    super.initState();
    userIDController.text = widget.userID;
    userNameController.text = widget.userName;

    subscriptions.addAll([
      ZEGOSDKManager.instance.zimService.connectionStateStreamCtrl.stream
          .listen((ZIMServiceConnectionStateChangedEvent event) {
        debugPrint('connectionStateStreamCtrl: $event');
        if (event.state == ZIMConnectionState.connected) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const HomePage()),
          );
        }
      })
    ]);
    requestPermission();
    //userNameController.text = 'user_${userIDController.text}';
  }

  @override
  void dispose() {
    for (var element in subscriptions) {
      element.cancel();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.only(top: 100, left: 20, right: 20),
        child: Column(
          children: [
            userIDInputView(),
            const SizedBox(
              height: 20,
            ),
            userNameInputView(),
            const SizedBox(
              height: 20,
            ),
            SizedBox(
              width: 200,
              height: 40,
              child: ElevatedButton(
                onPressed: () async {
                  // init SDK
                  await ZEGOSDKManager.instance.init(SDKKeyCenter.appID, kIsWeb ? null : SDKKeyCenter.appSign);
                  String? token;
                  if (kIsWeb) {
                    // ! ** Warning: ZegoTokenUtils is only for use during testing. When your application goes live,
                    // ! ** tokens must be generated by the server side. Please do not generate tokens on the client side!
                    token = ZegoTokenUtils.generateToken(
                        SDKKeyCenter.appID, SDKKeyCenter.serverSecret, userIDController.text);
                  }
                  await ZEGOSDKManager.instance
                      .connectUser(userIDController.text, userNameController.text, token: token);
                },
                child: const Text('Login'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget userIDInputView() {
    return Row(
      children: [
        const SizedBox(width: 20),
        const Text('userID:'),
        const SizedBox(width: 10),
        Flexible(
            child: TextField(
          controller: userIDController,
          decoration: const InputDecoration(
            labelText: 'please input your userID',
          ),
        )),
      ],
    );
  }

  Widget userNameInputView() {
    return Row(
      children: [
        const SizedBox(width: 20),
        const Text('userName:'),
        const SizedBox(width: 10),
        Flexible(
            child: TextField(
          controller: userNameController,
          decoration: const InputDecoration(
            labelText: 'please input your userName',
          ),
        )),
      ],
    );
  }
}
